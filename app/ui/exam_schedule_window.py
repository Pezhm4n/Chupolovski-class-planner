# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app/ui\exam_schedule_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class ExamScheduleWindow(object):
    def setupUi(self, ExamScheduleWindow):
        ExamScheduleWindow.setObjectName("ExamScheduleWindow")
        ExamScheduleWindow.resize(1200, 700)
        ExamScheduleWindow.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.centralwidget = QtWidgets.QWidget(ExamScheduleWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(15, 15, 15, 15)
        self.verticalLayout.setSpacing(12)
        self.verticalLayout.setObjectName("verticalLayout")
        self.title_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("IRANSans UI")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.title_label.setFont(font)
        self.title_label.setStyleSheet("color: #2c3e50; margin: 0;")
        self.title_label.setAlignment(QtCore.Qt.AlignCenter)
        self.title_label.setObjectName("title_label")
        self.verticalLayout.addWidget(self.title_label)
        self.info_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("IRANSans UI")
        font.setPointSize(12)
        self.info_label.setFont(font)
        self.info_label.setStyleSheet("color: #7f8c8d; font-style: italic; text-align: center; background: linear-gradient(135deg, #ecf0f1 0%, #bdc3c7 100%); padding: 10px; border-radius: 8px; margin: 6px;")
        self.info_label.setAlignment(QtCore.Qt.AlignCenter)
        self.info_label.setObjectName("info_label")
        self.verticalLayout.addWidget(self.info_label)
        self.separator = QtWidgets.QFrame(self.centralwidget)
        self.separator.setFrameShape(QtWidgets.QFrame.HLine)
        self.separator.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.separator.setObjectName("separator")
        self.verticalLayout.addWidget(self.separator)
        self.exam_table = QtWidgets.QTableWidget(self.centralwidget)
        self.exam_table.setAlternatingRowColors(True)
        self.exam_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.exam_table.setObjectName("exam_table")
        self.exam_table.setColumnCount(7)
        self.exam_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.exam_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.exam_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.exam_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.exam_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.exam_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.exam_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.exam_table.setHorizontalHeaderItem(6, item)
        self.exam_table.horizontalHeader().setStretchLastSection(False)
        self.exam_table.verticalHeader().setVisible(False)
        self.verticalLayout.addWidget(self.exam_table)
        self.stats_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("IRANSans UI")
        font.setPointSize(11)
        self.stats_label.setFont(font)
        self.stats_label.setStyleSheet("background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%); border: 1px solid #c3e6cb; border-radius: 8px; padding: 6px; font-weight: 500; color: #155724;")
        self.stats_label.setAlignment(QtCore.Qt.AlignCenter)
        self.stats_label.setObjectName("stats_label")
        self.verticalLayout.addWidget(self.stats_label)
        self.explanation_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("IRANSans UI")
        font.setPointSize(10)
        self.explanation_label.setFont(font)
        self.explanation_label.setStyleSheet("color: #7f8c8d; background: #f8f9fa; padding: 8px; border-radius: 5px; border: 1px solid #e9ecef;")
        self.explanation_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.explanation_label.setObjectName("explanation_label")
        self.verticalLayout.addWidget(self.explanation_label)
        self.bottom_separator = QtWidgets.QFrame(self.centralwidget)
        self.bottom_separator.setFrameShape(QtWidgets.QFrame.HLine)
        self.bottom_separator.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.bottom_separator.setObjectName("bottom_separator")
        self.verticalLayout.addWidget(self.bottom_separator)
        ExamScheduleWindow.setCentralWidget(self.centralwidget)
        self.toolBar = QtWidgets.QToolBar(ExamScheduleWindow)
        self.toolBar.setObjectName("toolBar")
        ExamScheduleWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.action_export = QtWidgets.QAction(ExamScheduleWindow)
        self.action_export.setObjectName("action_export")
        self.toolBar.addAction(self.action_export)

        self.retranslateUi(ExamScheduleWindow)
        QtCore.QMetaObject.connectSlotsByName(ExamScheduleWindow)

    def retranslateUi(self, ExamScheduleWindow):
        _translate = QtCore.QCoreApplication.translate
        ExamScheduleWindow.setWindowTitle(_translate("ExamScheduleWindow", "📅 برنامه امتحانات"))
        self.title_label.setText(_translate("ExamScheduleWindow", "📅 برنامه امتحانات (فقط دروس انتخابی)"))
        self.info_label.setText(_translate("ExamScheduleWindow", "فقط دروسی که در جدول اصلی قرار داده‌اید نمایش داده می‌شوند"))
        self.exam_table.setSortingEnabled(True)
        item = self.exam_table.horizontalHeaderItem(0)
        item.setText(_translate("ExamScheduleWindow", "نام درس"))
        item = self.exam_table.horizontalHeaderItem(1)
        item.setText(_translate("ExamScheduleWindow", "کد درس"))
        item = self.exam_table.horizontalHeaderItem(2)
        item.setText(_translate("ExamScheduleWindow", "استاد"))
        item = self.exam_table.horizontalHeaderItem(3)
        item.setText(_translate("ExamScheduleWindow", "زمان کلاس"))
        item = self.exam_table.horizontalHeaderItem(4)
        item.setText(_translate("ExamScheduleWindow", "زمان امتحان"))
        item = self.exam_table.horizontalHeaderItem(5)
        item.setText(_translate("ExamScheduleWindow", "واحد"))
        item = self.exam_table.horizontalHeaderItem(6)
        item.setText(_translate("ExamScheduleWindow", "محل برگزاری"))
        self.stats_label.setText(_translate("ExamScheduleWindow", "آمار برنامه در اینجا نمایش داده می‌شود"))
        self.explanation_label.setText(_translate("ExamScheduleWindow", "توضیحات:\n"
"• زوج: دروس هفته‌های زوج (در جدول با علامت ز نشان داده شده)\n"
"• فرد: دروس هفته‌های فرد (در جدول با علامت ف نشان داده شده)\n"
"• همه هفته‌ها: دروسی که هر هفته تشکیل می‌شوند"))
        self.toolBar.setWindowTitle(_translate("ExamScheduleWindow", "toolBar"))
        self.action_export.setText(_translate("ExamScheduleWindow", "📤 صدور برنامه امتحانات"))

    '''def export_exam_schedule(self):
        """Export the exam schedule to various formats"""
        if self.exam_table.rowCount() == 0:
            QtWidgets.QMessageBox.information(
                self, 'هیچ داده‌ای', 
                'هیچ درسی برای صدور برنامه امتحانات انتخاب نشده است.\n'
                'لطفا ابتدا در پنجره اصلی دروس مورد نظر را به جدول اضافه کنید.'
            )
            return
            
        # Ask user for export format
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle('صدور برنامه امتحانات')
        msg.setText('فرمت مورد نظر برای صدور را انتخاب کنید:')
        
        txt_btn = msg.addButton('فایل متنی (TXT)', QtWidgets.QMessageBox.ActionRole)
        html_btn = msg.addButton('فایل HTML', QtWidgets.QMessageBox.ActionRole)
        csv_btn = msg.addButton('فایل CSV', QtWidgets.QMessageBox.ActionRole)
        pdf_btn = msg.addButton('فایل PDF', QtWidgets.QMessageBox.ActionRole)
        cancel_btn = msg.addButton('لغو', QtWidgets.QMessageBox.RejectRole)
        
        msg.exec_()
        clicked_button = msg.clickedButton()
        
        if clicked_button == cancel_btn:
            return
        elif clicked_button == txt_btn:
            self.export_as_text()
        elif clicked_button == html_btn:
            self.export_as_html()
        elif clicked_button == csv_btn:
            self.export_as_csv()
        elif clicked_button == pdf_btn:
            self.export_as_pdf_vertical()'''
    def export_exam_schedule(self):
        """Export the exam schedule to various formats"""
        if self.exam_table.rowCount() == 0:
            QtWidgets.QMessageBox.information(
                self, 'هیچ داده‌ای', 
                'هیچ درسی برای صدور برنامه امتحانات انتخاب نشده است.\n'
                'لطفا ابتدا در پنجره اصلی دروس مورد نظر را به جدول اضافه کنید.'
            )
            return
            
        # Ask user for export format
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle('صدور برنامه امتحانات')
        msg.setText('فرمت مورد نظر برای صدور را انتخاب کنید:')

        txt_btn = msg.addButton('فایل متنی (TXT)', QtWidgets.QMessageBox.ActionRole)
        html_btn = msg.addButton('فایل HTML', QtWidgets.QMessageBox.ActionRole)
        csv_btn = msg.addButton('فایل CSV', QtWidgets.QMessageBox.ActionRole)
        
        pdf_v_btn = msg.addButton('PDF عمودی (A4 Portrait)', QtWidgets.QMessageBox.ActionRole)
        pdf_h_btn = msg.addButton('PDF افقی (A4 Landscape)', QtWidgets.QMessageBox.ActionRole)
        
        cancel_btn = msg.addButton('لغو', QtWidgets.QMessageBox.RejectRole)
        
        msg.exec_()
        clicked_button = msg.clickedButton()
        
        if clicked_button == cancel_btn:
            return
        elif clicked_button == txt_btn:
            self.export_as_text()
        elif clicked_button == html_btn:
            self.export_as_html()
        elif clicked_button == csv_btn:
            self.export_as_csv()
        elif clicked_button == pdf_v_btn:
            self.export_as_pdf_vertical()  # عمودی
        elif clicked_button == pdf_h_btn:
            self.export_as_pdf_horizontal()  # افقی

    def export_as_text(self):
        """Export exam schedule as plain text with comprehensive information"""
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, 'ذخیره برنامه امتحانات', 'exam_schedule.txt', 'Text Files (*.txt)'
        )
        if not filename:
            return
            
        try:
            from datetime import datetime
            current_date = datetime.now().strftime('%Y/%m/%d - %H:%M')
            
            with open(filename, 'w', encoding='utf-8-sig') as f:
                # Add BOM for proper RTL display in text editors
                f.write('\ufeff')
                
                f.write('📅 برنامه امتحانات دانشگاهی\n')
                f.write('='*60 + '\n\n')
                f.write(f'🕒 تاریخ تولید: {current_date}\n')
                f.write(f'📚 تولید شده توسط: برنامه‌ریز انتخاب واحد v2.0\n\n')
                
                # Calculate and display statistics
                total_courses = self.exam_table.rowCount()
                total_units = 0
                total_sessions = 0
                days_used = set()
                instructors = set()
                
                # Get placed courses for statistics
                if hasattr(self.parent_window, 'placed'):
                    placed_courses = set()
                    # Handle both single and dual courses correctly
                    for info in self.parent_window.placed.values():
                        if info.get('type') == 'dual':
                            # For dual courses, add both courses
                            placed_courses.update(info.get('courses', []))
                        else:
                            # For single courses, add the course key
                            placed_courses.add(info.get('course'))
                    
                    for course_key in placed_courses:
                        course = COURSES.get(course_key, {})
                        total_units += course.get('credits', 0)
                        instructors.add(course.get('instructor', 'نامشخص'))
                        for session in course.get('schedule', []):
                            days_used.add(session.get('day', ''))
                    
                    total_sessions = len(self.parent_window.placed)
                
                f.write('📊 خلاصه اطلاعات برنامه:\n')
                f.write('-' * 40 + '\n')
                f.write(f'• تعداد دروس: {total_courses}\n')
                f.write(f'• مجموع واحدها: {total_units}\n')
                f.write(f'• تعداد جلسات: {total_sessions}\n')
                f.write(f'• روزهای حضور: {len(days_used)} روز\n')
                f.write(f'• تعداد اساتید: {len(instructors)}\n\n')
                
                if days_used:
                    days_list = ', '.join(sorted([day for day in days_used if day]))
                    f.write(f'• روزهای حضور: {days_list}\n\n')
                
                f.write('📄 جزئیات برنامه امتحانات:\n')
                f.write('='*60 + '\n\n')
                
                for row in range(self.exam_table.rowCount()):
                    name = self.exam_table.item(row, 0).text() if self.exam_table.item(row, 0) else ''
                    code = self.exam_table.item(row, 1).text() if self.exam_table.item(row, 1) else ''
                    instructor = self.exam_table.item(row, 2).text() if self.exam_table.item(row, 2) else ''
                    class_schedule = self.exam_table.item(row, 3).text() if self.exam_table.item(row, 3) else ''
                    exam_time = self.exam_table.item(row, 4).text() if self.exam_table.item(row, 4) else ''
                    credits = self.exam_table.item(row, 5).text() if self.exam_table.item(row, 5) else ''
                    location = self.exam_table.item(row, 6).text() if self.exam_table.item(row, 6) else ''
                    
                    f.write(f'📚 درس {row + 1}:\n')
                    f.write(f'   نام: {name}\n')
                    f.write(f'   کد: {code}\n')
                    f.write(f'   استاد: {instructor}\n')
                    f.write(f'   تعداد واحد: {credits}\n')
                    f.write(f'   زمان کلاس:\n{class_schedule}\n')
                    f.write(f'   زمان امتحان:\n{exam_time}\n')
                    f.write(f'   محل برگزاری: {location}\n')
                    f.write('-'*50 + '\n\n')
                
                f.write('\n' + '='*60 + '\n')
                f.write('📝 توضیحات علائم:\n')
                f.write('• زوج: دروس هفته‌های زوج (در جدول با علامت ز نشان داده شده)\n')
                f.write('• فرد: دروس هفته‌های فرد (در جدول با علامت ف نشان داده شده)\n')
                f.write('• همه هفته‌ها: دروسی که هر هفته تشکیل می‌شوند\n\n')
                    
            QtWidgets.QMessageBox.information(self, 'صدور موفق', f'برنامه امتحانات در فایل زیر ذخیره شد:\n{filename}\n\nنکته: برای نمایش صحیح متن راست به چپ، فایل را با یک ویرایشگر متن که از UTF-8 و RTL پشتیبانی می‌کند باز کنید.')
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, 'خطا', f'خطا در ذخیره فایل:\n{str(e)}')

    def export_as_html(self):
        """Export exam schedule as HTML with improved styling and complete information"""
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, 'ذخیره برنامه امتحانات', 'exam_schedule.html', 'HTML Files (*.html)'
        )
        if not filename:
            return
            
        try:
            # Create HTML content with RTL support and enhanced styling
            from datetime import datetime
            current_date = datetime.now().strftime('%Y/%m/%d - %H:%M')
            
            # Calculate comprehensive statistics
            total_courses = self.exam_table.rowCount()
            total_units = 0
            total_sessions = 0
            days_used = set()
            instructors = set()
            
            # Get placed courses for statistics
            if hasattr(self.parent_window, 'placed'):
                    placed_courses = set()
                    # Handle both single and dual courses correctly
                    for info in self.parent_window.placed.values():
                        if info.get('type') == 'dual':
                            # For dual courses, add both courses
                            placed_courses.update(info.get('courses', []))
                        else:
                            # For single courses, add the course key
                            placed_courses.add(info.get('course'))
                    
                    for course_key in placed_courses:
                        course = COURSES.get(course_key, {})
                        total_units += course.get('credits', 0)
                        instructors.add(course.get('instructor', 'نامشخص'))
                        for session in course.get('schedule', []):
                            days_used.add(session.get('day', ''))
                    
                    total_sessions = len(self.parent_window.placed)
            
            # Generate table rows
            table_rows = ""
            for row in range(self.exam_table.rowCount()):
                name = self.exam_table.item(row, 0).text() if self.exam_table.item(row, 0) else ''
                code = self.exam_table.item(row, 1).text() if self.exam_table.item(row, 1) else ''
                instructor = self.exam_table.item(row, 2).text() if self.exam_table.item(row, 2) else ''
                class_schedule = self.exam_table.item(row, 3).text() if self.exam_table.item(row, 3) else ''
                exam_time = self.exam_table.item(row, 4).text() if self.exam_table.item(row, 4) else ''
                credits = self.exam_table.item(row, 5).text() if self.exam_table.item(row, 5) else ''
                location = self.exam_table.item(row, 6).text() if self.exam_table.item(row, 6) else ''
                
                table_rows += f"""
                <tr>
                    <td>{name}</td>
                    <td>{code}</td>
                    <td>{instructor}</td>
                    <td style="white-space: pre-line;">{class_schedule}</td>
                    <td style="white-space: pre-line;">{exam_time}</td>
                    <td>{credits}</td>
                    <td>{location}</td>
                </tr>
                """
            
            # Create complete HTML document with all requested styling
            html_content = f"""<!DOCTYPE html>
<html dir="rtl" lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>برنامه امتحانات دانشگاهی</title>
    <style>
        @import url('https://cdn.jsdelivr.net/gh/rastikerdar/vazir-font@v30.1.0/dist/font-face.css');
        
        body {{
            font-family: 'Vazir', 'Vazir Matn', 'IRANSans', 'Tahoma', 'Arial', sans-serif;
            background-color: #fff;
            margin: 0;
            padding: 20px;
            direction: rtl;
            text-align: right;
            line-height: 1.5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        h1 {{
            color: #9C27B0;
            text-align: center;
            margin-bottom: 30px;
            font-weight: bold;
        }}
        .summary {{
            background-color: #E1BEE7;
            color: #333;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            margin-bottom: 30px;
        }}
        .table-container {{
            overflow-x: auto;
            margin-bottom: 30px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-radius: 4px;
        }}
        .exam-table {{
            width: 100%;
            border-collapse: collapse;
            background-color: #fff;
        }}
        .exam-table thead {{
            background-color: #9C27B0;
            color: black;
        }}
        .exam-table th {{
            padding: 12px 15px;
            text-align: center;
            font-weight: normal;
        }}
        .exam-table td {{
            padding: 12px 15px;
            border: 1px solid #dcdcdc;
            text-align: right;
            vertical-align: middle;
        }}
        .exam-table tr:nth-child(even) {{
            background-color: #fff;
        }}
        .exam-table tr:nth-child(odd) {{
            background-color: #f9f9f9;
        }}
        .exam-table tr:hover {{
            background-color: #e3f2fd;
        }}
        .numeric {{
            text-align: center;
        }}
        .explanation {{
            color: #7f8c8d;
            font-size: 14px;
            text-align: right;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }}
        .footer {{
            display: none;
        }}
        @media (max-width: 768px) {{
            .container {{
                padding: 10px;
            }}
            .exam-table th,
            .exam-table td {{
                padding: 8px 10px;
                font-size: 14px;
            }}
            .summary {{
                padding: 15px;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>📅 برنامه امتحانات دانشگاهی</h1>
        
        <div class="summary">
            📊 خلاصه اطلاعات برنامه:<br>
            تعداد دروس: {total_courses} | مجموع واحدها: {total_units} | تعداد جلسات: {total_sessions} | روزهای حضور: {len(days_used)} روز
        </div>
        
        <div class="table-container">
            <table class="exam-table">
                <thead>
                    <tr>
                        <th>نام درس</th>
                        <th>کد درس</th>
                        <th>استاد</th>
                        <th>زمان کلاس</th>
                        <th>زمان امتحان</th>
                        <th class="numeric">واحد</th>
                        <th>محل برگزاری</th>
                    </tr>
                </thead>
                <tbody>
                    {table_rows}
                </tbody>
            </table>
        </div>
        
        <div class="explanation">
            <strong>توضیحات:</strong><br>
            • زوج: دروس هفته‌های زوج (در جدول با علامت ز نشان داده شده)<br>
            • فرد: دروس هفته‌های فرد (در جدول با علامت ف نشان داده شده)<br>
            • همه هفته‌ها: دروسی که هر هفته تشکیل می‌شوند
        </div>
    </div>
</body>
</html>"""
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
                
            QtWidgets.QMessageBox.information(self, 'صدور موفق', f'برنامه امتحانات در فایل زیر ذخیره شد:\n{filename}')
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, 'خطا', f'خطا در ذخیره فایل:\n{str(e)}')

    def export_as_csv(self):
        """Export exam schedule as CSV"""
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, 'ذخیره برنامه امتحانات', 'exam_schedule.csv', 'CSV Files (*.csv)'
        )
        if not filename:
            return
            
        try:
            import csv
            with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
                writer = csv.writer(csvfile)
                
                # Write header
                writer.writerow(['نام درس', 'کد درس', 'استاد', 'زمان کلاس', 'زمان امتحان', 'واحد', 'محل برگزاری'])
                
                # Write data
                for row in range(self.exam_table.rowCount()):
                    name = self.exam_table.item(row, 0).text() if self.exam_table.item(row, 0) else ''
                    code = self.exam_table.item(row, 1).text() if self.exam_table.item(row, 1) else ''
                    instructor = self.exam_table.item(row, 2).text() if self.exam_table.item(row, 2) else ''
                    class_schedule = self.exam_table.item(row, 3).text() if self.exam_table.item(row, 3) else ''
                    exam_time = self.exam_table.item(row, 4).text() if self.exam_table.item(row, 4) else ''
                    credits = self.exam_table.item(row, 5).text() if self.exam_table.item(row, 5) else ''
                    location = self.exam_table.item(row, 6).text() if self.exam_table.item(row, 6) else ''
                    writer.writerow([name, code, instructor, class_schedule, exam_time, credits, location])
                    
            QtWidgets.QMessageBox.information(self, 'صدور موفق', f'برنامه امتحانات در فایل زیر ذخیره شد:\n{filename}')
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, 'خطا', f'خطا در ذخیره فایل:\n{str(e)}')

    def export_as_pdf(self):
        """Export exam schedule as PDF (placeholder implementation)"""
        QtWidgets.QMessageBox.information(
            self, 'قابلیت آزمایشی', 
            'صدور به فرمت PDF در این نسخه آزمایشی پشتیبانی نمی‌شود.\n'
            'لطفا از فرمت‌های دیگر مانند TXT یا HTML استفاده کنید.'
        )
        
    def export_as_html_to_file(self, path):
        """Generate HTML file for exam schedule without QFileDialog (used for PDF export)"""
        try:
            from datetime import datetime
            current_date = datetime.now().strftime('%Y/%m/%d - %H:%M')

            total_courses = self.exam_table.rowCount()
            total_units = 0
            total_sessions = 0
            days_used = set()
            instructors = set()

            if hasattr(self.parent_window, 'placed'):
                placed_courses = set()
                for info in self.parent_window.placed.values():
                    if info.get('type') == 'dual':
                        placed_courses.update(info.get('courses', []))
                    else:
                        placed_courses.add(info.get('course'))

                for course_key in placed_courses:
                    course = COURSES.get(course_key, {})
                    total_units += course.get('credits', 0)
                    instructors.add(course.get('instructor', 'نامشخص'))
                    for session in course.get('schedule', []):
                        days_used.add(session.get('day', ''))

                total_sessions = len(self.parent_window.placed)

            table_rows = ""
            for row in range(self.exam_table.rowCount()):
                name = self.exam_table.item(row, 0).text() if self.exam_table.item(row, 0) else ''
                code = self.exam_table.item(row, 1).text() if self.exam_table.item(row, 1) else ''
                instructor = self.exam_table.item(row, 2).text() if self.exam_table.item(row, 2) else ''
                class_schedule = self.exam_table.item(row, 3).text() if self.exam_table.item(row, 3) else ''
                exam_time = self.exam_table.item(row, 4).text() if self.exam_table.item(row, 4) else ''
                credits = self.exam_table.item(row, 5).text() if self.exam_table.item(row, 5) else ''
                location = self.exam_table.item(row, 6).text() if self.exam_table.item(row, 6) else ''

                table_rows += f"""
                <tr>
                    <td>{name}</td>
                    <td class="course-code">{code}</td>
                    <td>{instructor}</td>
                    <td style="white-space: pre-line;">{class_schedule}</td>
                    <td style="white-space: pre-line;">{exam_time}</td>
                    <td>{credits}</td>
                    <td>{location}</td>
                </tr>
                """

            html_content = f"""<!DOCTYPE html>
    <html dir="rtl" lang="fa">
    <head>
    <meta charset="UTF-8">
    <title>برنامه امتحانات دانشگاهی</title>
    <style>
    body {{
        font-family: 'IRANSans', 'Tahoma', sans-serif;
        background-color: #fff;
        margin: 0;
        padding: 20px;
        direction: rtl;
        text-align: right;
    }}
    h1 {{ color: #9C27B0; text-align:center; }}
    .summary {{
        background-color:#E1BEE7;
        padding:15px;
        border-radius:8px;
        margin-bottom:20px;
        text-align:center;
    }}
    table {{
        width:100%;
        border-collapse: collapse;
        table-layout: fixed;
    }}
    th, td {{
        border:1px solid #dcdcdc;
        padding:8px;
        text-align:center;
        word-wrap: break-word;
    }}
    tr:nth-child(even) {{ background-color:#fff; }}
    tr:nth-child(odd) {{ background-color:#f9f9f9; }}
    .course-code {{
        font-size: 0.8em; /* کوچک کردن کد درس */
        white-space: nowrap; /* جلوگیری از شکستن کد در چند خط */
    }}
    </style>
    </head>
    <body>
    <h1>📅 برنامه امتحانات دانشگاهی</h1>
    <div class="summary">
    📊 خلاصه اطلاعات برنامه:<br>
    تعداد دروس: {total_courses} | مجموع واحدها: {total_units} | تعداد جلسات: {total_sessions} | روزهای حضور: {len(days_used)} روز
    </div>
    <table>
    <thead>
    <tr>
    <th>نام درس</th>
    <th>کد درس</th>
    <th>استاد</th>
    <th>زمان کلاس</th>
    <th>زمان امتحان</th>
    <th>واحد</th>
    <th>محل برگزاری</th>
    </tr>
    </thead>
    <tbody>
    {table_rows}
    </tbody>
    </table>
    </body>
    </html>"""

            with open(path, 'w', encoding='utf-8') as f:
                f.write(html_content)

        except Exception as e:
            from PyQt5 import QtWidgets
            QtWidgets.QMessageBox.critical(self, 'خطا', f'خطا در ساخت فایل HTML برای PDF:\n{str(e)}')


    def export_as_pdf_vertical(self):
        """Export exam schedule as PDF compatible with all PyQt5 versions"""
        from PyQt5 import QtCore, QtWidgets, QtWebEngineWidgets
        import tempfile
        import os

        # مسیر ذخیره PDF
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(
            self, 'ذخیره برنامه امتحانات', 'exam_schedule.pdf', 'PDF Files (*.pdf)'
        )
        if not filename:
            return

        try:
            # ساخت فایل HTML موقت
            temp_html = tempfile.NamedTemporaryFile(delete=False, suffix=".html")
            self.export_as_html_to_file(temp_html.name)
            temp_html.close()

            view = QtWebEngineWidgets.QWebEngineView()
            view.setUrl(QtCore.QUrl.fromLocalFile(temp_html.name))

            def pdf_callback(pdf_bytes):
                try:
                    with open(filename, 'wb') as f:
                        f.write(pdf_bytes)
                    QtWidgets.QMessageBox.information(self, 'صدور موفق', f'PDF ذخیره شد:\n{filename}')
                except Exception as e:
                    QtWidgets.QMessageBox.critical(self, 'خطا', f'خطا در ذخیره PDF:\n{e}')
                finally:
                    if os.path.exists(temp_html.name):
                        os.unlink(temp_html.name)

            # وقتی صفحه بارگذاری شد، PDF تولید شود
            def on_load_finished(ok):
                if ok:
                    view.page().printToPdf(pdf_callback)
                else:
                    QtWidgets.QMessageBox.critical(self, 'خطا', 'بارگذاری HTML شکست خورد')
                    if os.path.exists(temp_html.name):
                        os.unlink(temp_html.name)

            view.loadFinished.connect(on_load_finished)

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, 'خطا', f'خطا در تولید PDF:\n{str(e)}')

    def export_as_pdf_horizontal(self):
        """Export the exam schedule as PDF in landscape (horizontal) layout"""
        try:
            filename, _ = QtWidgets.QFileDialog.getSaveFileName(
                self, 'ذخیره برنامه امتحانات (افقی)', 'exam_schedule_horizontal.pdf', 'PDF Files (*.pdf)'
            )
            if not filename:
                return
            
            from PyQt5.QtWebEngineWidgets import QWebEngineView
            from PyQt5.QtGui import QPageLayout, QPageSize
            from PyQt5.QtCore import QMarginsF, QSizeF
            
            # ساخت فایل HTML موقت
            html_temp_path = filename.replace('.pdf', '_temp.html')
            self.export_as_html_to_file(html_temp_path)
            
            # بارگذاری HTML در WebEngine
            web = QWebEngineView()
            web.load(QtCore.QUrl.fromLocalFile(os.path.abspath(html_temp_path)))
            
            def on_load_finished(ok):
                if not ok:
                    QtWidgets.QMessageBox.critical(self, 'خطا', 'خطا در بارگذاری HTML برای چاپ PDF.')
                    return
                
                layout = QPageLayout(
                    QPageSize(QPageSize.A4),
                    QPageLayout.Landscape,  # جهت افقی
                    QMarginsF(10, 10, 10, 10)
                )
                
                web.page().printToPdf(filename, layout)
                QtWidgets.QMessageBox.information(self, 'صدور موفق', f'فایل PDF افقی ذخیره شد:\n{filename}')
                
                # حذف فایل HTML موقت
                try:
                    os.remove(html_temp_path)
                except:
                    pass
            
            web.loadFinished.connect(on_load_finished)
        
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, 'خطا', f'خطا در صدور PDF افقی:\n{str(e)}')
